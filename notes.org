-*- mode: org; word-wrap: t; eval: (auto-fill-mode t); fill-column: 120; -*-
#+STARTUP: showstars
* htmx pokemon browser
** Note
This is an org-mode file so probably looks weird if you're not in Emacs.
** Effect problems 
Converting between javascript and typed errors. You have to know the full range of errors and encode them in a type.

Type chess. Often hard to get the right types, documentation not great.

No type error when forget to yield an effect. only one of these below actually executes...
#+BEGIN_SRC typescript
    yield* _(Console.info(`Pokemon ${lookup} is ${getTen.name} with power ${getTen.power}`));
    Console.info(`Pokemon ${lookup} is ${getTen.name} with power ${getTen.power}`);
#+END_SRC

** Effects wins
Effects Discord is active and good

** Things to do
- Improve css formatting of header
- Complete caching nicely with Effect
- Add some fun AI interaction
** Code sample from discord
Thanks @TheStockBroker

#+BEGIN_SRC typescript
interface Pokemons {
  readonly All: Effect.Effect<never, PokemonsError, Pokemon[]>
  readonly range: (offset: number, limit: number) =>
    Effect.Effect<never, PokemonsError | OutOfRangeError, Pokemon[]>
  readonly ofCodex: (n: number) => 
    Effect.Effect<never, PokemonsError | OutOfRangeError, Pokemon>
}
const tag = Context.Tag<Pokemons>("Pokemons")

const PokemonsService = Effect.gen(function* (_) {
  const client = yield* _(HttpClient.client.Client)
  const pokemonClient = client.pipe(
    HttpClient.client.mapRequest("https://pokeapi.co/api/v2/")
  )
  const pokemon = HttpClient.request.get("/pokemon")
  
  return tag.of({
    All: pokemonClient(pokemon).pipe(
      Effect.mapError(_ => new PokemonsError({ error: _ }))
    ),
    range: (offset, limit) => (...),
    ...
  })
})

const live = Layer.effect(tag, PokemonsService)
const charizard = new Pokemon({name: "Charizard"})
const mock = Layer.succeed(tag, tag.of({
    All: Effect.succeed([charizard]),
    range: () => Effect.succeed([charizard]),
    ofCodex: () => Effect.succeed(charizard)
})
#+END_SRC
